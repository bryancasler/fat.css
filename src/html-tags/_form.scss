// ################################
// Form Variables
// ################################

$bf-black: #000000;
$bf-gray: #cccccc;
$bf-blue: #0000ff;
$bf-white: #ffffff;
$bf-spacing-md-rem: 1.0rem !default;
$bf-spacing-lg-rem: 1.5rem !default;

// ################################
// Form Styles
// ################################

// <button> Creates a clickable button.
button{
    cursor: pointer;
}

// <datalist> Represents a set of pre-defined options for an <input> element.
// TODO

// <fieldset> Specifies a set of related form fields.
// TODO

// <form> Defines an HTML form for user input.
// TODO

// <input> Defines an input control.
input[readonly] {
    cursor: default;
}

input:disabled{
    cursor: not-allowed;
}

// <input type="button"> A push button with no default behavior displaying the value of the value attribute, empty by default.
input[type="button"]{
    cursor: pointer;
}
// <input type="checkbox"> A check box allowing single values to be selected/deselected.
label > input[type="checkbox"]:not(:disabled){
    cursor: pointer;
}
// <input type="color"> A control for specifying a color; opening a color picker when active in supporting browsers.
input[type="color"]{
    cursor: pointer;
}
// <input type="date"> A control for entering a date (year, month, and day, with no time). Opens a date picker or numeric wheels for year, month, day when active in supporting browsers.
// <input type="datetime"> Obsolete A control for entering a date and time (hour, minute, second, and fraction of a second) as well as a timezone.
// <input type="datetime-local"> A control for entering a date and time, with no time zone. Opens a date picker or numeric wheels for date- and time-components when active in supporting browsers.
// <input type="email"> A field for editing an email address. Looks like a text input, but has validation parameters and relevant keyboard in supporting browsers and devices with dynamic keyboards.
// <input type="file"> A control that lets the user select a file. Use the accept attribute to define the types of files that the control can select.
input[type="file"]{
    cursor: pointer;
}
// <input type="hidden"> A control that is not displayed but whose value is submitted to the server. There is an example in the next column, but it's hidden!
// <input type="image"> A graphical submit button. Displays an image defined by the src attribute. The alt attribute displays if the image src is missing.
// <input type="month"> A control for entering a month and year, with no time zone.
// <input type="number"> A control for entering a number. Displays a spinner and adds default validation when supported. Displays a numeric keypad in some devices with dynamic keypads.
// <input type="password"> A single-line text field whose value is obscured. Will alert user if site is not secure.
// <input type="radio"> A radio button, allowing a single value to be selected out of multiple choices with the same name value.
label > input[type="radio"]:not(:disabled) {
    cursor: pointer;
    
}

// <input type="range"> A control for entering a number whose exact value is not important. Displays as a range widget defaulting to the middle value. Used in conjunction min and max to define the range of acceptable values.
input[type="range"]{
    cursor: pointer;
}

// <input type="reset"> A button that resets the contents of the form to default values. Not recommended.
input[type="reset"]{
    cursor: pointer;
}

// <input type="search"> A single-line text field for entering search strings. Line-breaks are automatically removed from the input value. May include a delete icon in supporting browsers that can be used to clear the field. Displays a search icon instead of enter key on some devices with dynamic keypads.
// <input type="submit"> A button that submits the form.
input[type="submit"]{
    cursor: pointer;
}

// <input type="tel"> A control for entering a telephone number. Displays a telephone keypad in some devices with dynamic keypads.
// <input type="text"> The default value. A single-line text field. Line-breaks are automatically removed from the input value.
// <input type="time"> A control for entering a time value with no time zone.
// <input type="url"> A field for entering a URL. Looks like a text input, but has validation parameters and relevant keyboard in supporting browsers and devices with dynamic keyboards.
// <input type="week"> A control for entering a date consisting of a week-year number and a week number with no time zone.
// <keygen> Represents a control for generating a public-private key pair.
// <label> Defines a label for an <input> control.
/* stylelint-disable selector-no-qualifying-type */
input[type="checkbox"][id]:disabled + label[for],
input[type="radio"][id]:disabled + label[for] {
    cursor: not-allowed;
}
/* stylelint-enable */

// <legend> Defines a caption for a <fieldset> element.
// <meter> Represents a scalar measurement within a known range.
// <optgroup> Defines a group of related options in a selection list.
// <option> Defines an option in a selection list.
// <select> Defines a selection list within a form.

// TODO This can happen when clicking round between multiple selects, the console, and the first option in the select https://d.pr/i/68au4V
// custom <select> arrow and appearance with a base64 embedded SVG icon
// https://css-tricks.com/probably-dont-base64-svg/#article-header-id-2
//
// this is inspired from https://github.com/kognise/water.css
// and from Bootstrap custom select
// https://getbootstrap.com/docs/4.4/components/input-group/#custom-select

// ! :not and calc() are IE9+
// https://caniuse.com/#feat=mdn-css_selectors_not
// https://caniuse.com/#feat=calc
//
// ! 12px = the icon width/height, and must be in pixels because
// calc() is just for values
// https://css-tricks.com/a-complete-guide-to-calc-in-css/#0-calc-is-for-values
//
// a select with a [multiple] attribute doesn't show an arrow by default
// a select with a [size] attribute gets and arrow on iOS (Webkit) for instance
// but on Chrome and FF desktop
// so, is not safe to style every kind of <select>
//
// remove the arrow and the appearance, especially on Webkit
select:not([size]):not([multiple]) {
    appearance: none;
  }
  
  // IE10+
  // The '::-ms-expand' CSS pseudo-element is a Microsoft extension that represents
  // the button of a <select> menu control that opens or closes the drop-down
  // menu. Typically it is a triangle that points downward.
  // https://developer.mozilla.org/en-US/docs/Web/CSS/::-ms-expand
  select::-ms-expand {
    display: none;
  }
  
  select:not([size]):not([multiple]) {
    background: $bf-white
      url("data:image/svg+xml,%3csvg xmlns='http://www.w3.org/2000/svg' width='4' height='5' viewBox='0 0 4 5'%3e%3cpath fill='%23343a40' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e")
      no-repeat right 0.85rem center/8px 10px;
  
    padding-right: 1.2rem + $bf-spacing-lg-rem;
  }
  
  // since '::-ms-expand' is IE10+ only
  // and IE8 doesn't recognize the ':not' selector, so didn't get those rulesets
  // https://caniuse.com/#feat=mdn-css_selectors_not
  //
  // let's revert the standard styles on IE9 via CSS hacks
  // and hide the custom <select> arrow
  //
  
  // IE9 only hack
  // https://gist.github.com/yangfch3/2e48bca9c08bf883131d7917c4892fa2#ie-9-only
  @media all and (min-width: 0\0) and (min-resolution: 0.001dpcm) {
    select {
      padding-right: $bf-spacing-md-rem;
  
      // re-set the default properties
      background-image: none;
      background-repeat: repeat;
    }
  }

/* Changes background color of the selected option https://d.pr/i/kx3jvj */
select[multiple] option:hover, 
select[multiple] option:focus, 
select[multiple] option:active, 
select[multiple] option:checked
{
    background: linear-gradient(#FFC894,#FFC894);
    background-color: #FFC894 !important; /* for IE */ /*TODO Remove IE Support */
}

// <textarea> Defines a multi-line text input control (text area).
// TODO

